--- guncon2.c	2023-01-27 13:29:11.279519378 +0000
+++ guncon2_bis.c	2023-01-27 12:29:05.000000000 +0000
@@ -37,6 +37,15 @@
 #define Y_MIN 20
 #define Y_MAX 240
 
+// normalized values to report
+#define XN_MIN -32768
+#define XN_MAX 32767
+#define YN_MIN -32768
+#define YN_MAX 32767
+#define OFFSCREEN -65536 
+#define CENTER 32768
+
+
 struct guncon2 {
     struct input_dev *input_device;
     struct usb_interface *intf;
@@ -44,6 +53,7 @@
     struct mutex pm_mutex;
     bool is_open;
     char phys[64];
+    bool is_recalibrate;
 };
 
 struct gc_mode {
@@ -60,7 +70,11 @@
     int error, buttons;
     unsigned short x, y;
     signed char hat_x = 0;
-    signed char hat_y = 0;
+    signed char hat_y = 0;    
+    unsigned short x_min, x_max, y_min, y_max;     
+    unsigned short rx, ry;
+    unsigned long nx, ny;
+    
 
     switch (urb->status) {
         case 0:
@@ -90,9 +104,11 @@
         /* Aiming */
         x = (data[3] << 8) | data[2];
         y = data[4];
-
-        input_report_abs(guncon2->input_device, ABS_X, x);
-        input_report_abs(guncon2->input_device, ABS_Y, y);
+        
+        //psakhis - apply normalized to left analog      
+        //input_report_abs(guncon2->input_device, ABS_X, x);
+        //input_report_abs(guncon2->input_device, ABS_Y, y);  
+      
 
         /* Buttons */
         buttons = ((data[0] << 8) | data[1]) ^ 0xffff;
@@ -115,13 +131,62 @@
 
         // main buttons
         input_report_key(guncon2->input_device, BTN_LEFT, buttons & GUNCON2_TRIGGER);
-        input_report_key(guncon2->input_device, BTN_RIGHT, buttons & GUNCON2_BTN_A || buttons & GUNCON2_BTN_C);
+        //input_report_key(guncon2->input_device, BTN_RIGHT, buttons & GUNCON2_BTN_A || buttons & GUNCON2_BTN_C);
+        input_report_key(guncon2->input_device, BTN_RIGHT, buttons & GUNCON2_BTN_A);
         input_report_key(guncon2->input_device, BTN_MIDDLE, buttons & GUNCON2_BTN_B);
         input_report_key(guncon2->input_device, BTN_A, buttons & GUNCON2_BTN_A);
         input_report_key(guncon2->input_device, BTN_B, buttons & GUNCON2_BTN_B);
         input_report_key(guncon2->input_device, BTN_C, buttons & GUNCON2_BTN_C);
         input_report_key(guncon2->input_device, BTN_START, buttons & GUNCON2_BTN_START);
-        input_report_key(guncon2->input_device, BTN_SELECT, buttons & GUNCON2_BTN_SELECT);
+        input_report_key(guncon2->input_device, BTN_SELECT, buttons & GUNCON2_BTN_SELECT);               	
+
+        x_min = input_abs_get_min(guncon2->input_device, ABS_RX);	
+        x_max = input_abs_get_max(guncon2->input_device, ABS_RX); 	
+        y_min = input_abs_get_min(guncon2->input_device, ABS_RY);	
+        y_max = input_abs_get_max(guncon2->input_device, ABS_RY);         
+        //micro calibration       
+        if ((!guncon2->is_recalibrate) && (buttons & GUNCON2_BTN_C) && (buttons & GUNCON2_DPAD_LEFT)) {
+            x_min--;	                       
+            guncon2->is_recalibrate = true;
+        }	
+        if ((!guncon2->is_recalibrate) && (buttons & GUNCON2_BTN_C) && (buttons & GUNCON2_DPAD_RIGHT)) {
+            x_min++;	                     
+            guncon2->is_recalibrate = true;
+        }
+        if ((!guncon2->is_recalibrate) && (buttons & GUNCON2_BTN_C) && (buttons & GUNCON2_DPAD_UP)) {          
+            x_max++; 	            
+            guncon2->is_recalibrate = true;
+        }	
+        if ((!guncon2->is_recalibrate) && (buttons & GUNCON2_BTN_C) && (buttons & GUNCON2_DPAD_DOWN)) {            
+            x_max--; 	          
+            guncon2->is_recalibrate = true;
+        }
+        if (guncon2->is_recalibrate) {
+            input_set_abs_params(guncon2->input_device, ABS_RX, x_min, x_max, 0, 0);            
+        }
+        if (hat_x == 0 && hat_y == 0) {
+            guncon2->is_recalibrate = false;
+        }
+        // end micro calibration
+
+        // psakhis: apply normalized values
+        rx = x_max - x_min;
+        if (x < x_min || x > x_max || rx == 0) {
+            input_report_abs(guncon2->input_device, ABS_X, OFFSCREEN);
+        } else {
+            nx = (x - x_min) << 16;            
+            do_div(nx, rx);              
+            input_report_abs(guncon2->input_device, ABS_X, nx - CENTER);
+        } 
+         ry = y_max - y_min;
+        if (y < y_min || y > y_max || ry == 0) {
+            input_report_abs(guncon2->input_device, ABS_Y, OFFSCREEN);
+        } else {
+            ny = (y - y_min) << 16;
+            do_div(ny, ry);                
+            input_report_abs(guncon2->input_device, ABS_Y, ny - CENTER);            
+        } 
+        // end psakhis
 
         input_sync(guncon2->input_device);
     }
@@ -161,9 +226,10 @@
         retval = -EIO;
         goto out;
     }
-
+    
+    guncon2->is_recalibrate = false;
     guncon2->is_open = true;
-
+    
 out:
     mutex_unlock(&guncon2->pm_mutex);
     return retval;
@@ -174,6 +240,7 @@
     mutex_lock(&guncon2->pm_mutex);
     usb_kill_urb(guncon2->urb);
     guncon2->is_open = false;
+    guncon2->is_recalibrate = false;
     mutex_unlock(&guncon2->pm_mutex);
 }
 
@@ -210,6 +277,7 @@
 
     mutex_init(&guncon2->pm_mutex);
     guncon2->intf = intf;
+    guncon2->is_recalibrate = false;   
 
     usb_set_intfdata(guncon2->intf, guncon2);
 
@@ -255,9 +323,15 @@
     input_set_capability(guncon2->input_device, EV_KEY, BTN_MIDDLE);
     input_set_capability(guncon2->input_device, EV_ABS, ABS_X);
     input_set_capability(guncon2->input_device, EV_ABS, ABS_Y);
+    input_set_capability(guncon2->input_device, EV_ABS, ABS_RX);
+    input_set_capability(guncon2->input_device, EV_ABS, ABS_RY);
 
-    input_set_abs_params(guncon2->input_device, ABS_X, X_MIN, X_MAX, 0, 0);
-    input_set_abs_params(guncon2->input_device, ABS_Y, Y_MIN, Y_MAX, 0, 0);
+    input_set_abs_params(guncon2->input_device, ABS_X, XN_MIN, XN_MAX, 0, 0);    
+    input_set_abs_params(guncon2->input_device, ABS_Y, YN_MIN, YN_MAX, 0, 0);
+    
+    //psakhis - store values on right analog    
+    input_set_abs_params(guncon2->input_device, ABS_RX, X_MIN, X_MAX, 0, 0);
+    input_set_abs_params(guncon2->input_device, ABS_RY, Y_MIN, Y_MAX, 0, 0);    
 
     input_set_capability(guncon2->input_device, EV_KEY, BTN_A);
     input_set_capability(guncon2->input_device, EV_KEY, BTN_B);
