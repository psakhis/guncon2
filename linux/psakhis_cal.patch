--- calibrate.py	2023-01-26 22:46:18.300086352 +0000
+++ calibrate_bis.py	2023-01-26 21:45:24.000000000 +0000
@@ -26,23 +26,23 @@
 
     @property
     def absinfo(self):
-        return [self.device.absinfo(ecodes.ABS_X), self.device.absinfo(ecodes.ABS_Y)]
+        return [self.device.absinfo(ecodes.ABS_RX), self.device.absinfo(ecodes.ABS_RY)]
 
     @property
     def min_x(self):
-        return self.device.absinfo(ecodes.ABS_X).min
+        return self.device.absinfo(ecodes.ABS_RX).min
 
     @property
     def max_x(self):
-        return self.device.absinfo(ecodes.ABS_X).max
+        return self.device.absinfo(ecodes.ABS_RX).max
 
     @property
     def min_y(self):
-        return self.device.absinfo(ecodes.ABS_Y).min
+        return self.device.absinfo(ecodes.ABS_RY).min
 
     @property
     def max_y(self):
-        return self.device.absinfo(ecodes.ABS_Y).max
+        return self.device.absinfo(ecodes.ABS_RY).max
 
     @property
     def pos_normalised(self):
@@ -75,7 +75,8 @@
 
         # calculate the ratio between on-screen units and gun units for each axes
         try:
-            gsratio_x = (max(targets_x) - min(targets_x)) / (max(shots_x) - min(shots_x))
+            #gsratio_x = (max(targets_x) - min(targets_x)) / (max(shots_x) - min(shots_x))
+            gsratio_x = (max(shots_x) - min(shots_x)) / (385 - (width - max(targets_x) + min(targets_x)))     #8MHZ precision
         except ZeroDivisionError:
             log.error("Failed to calibrate X axis")
             return
